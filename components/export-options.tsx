"use client";

import type React from "react";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Download, Copy, Share, Check } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Direction } from "@/lib/types";
import { directionToPosition } from "@/lib/utils";

interface Position {
  x: number;
  y: number;
  z: number;
}

interface ExportOptionsProps {
  sequence?: string;
  directions?: Direction[];
  proteinName?: string;
  onSaveExport?: (type: string, fileName: string) => void;
  onExport: () => Promise<void>;
}

const ExportOptions: React.FC<ExportOptionsProps> = ({
  sequence,
  directions,
  proteinName = "Protein",
  onSaveExport,
  onExport,
}) => {
  if (!sequence) {
    return (
      <Card>
        <CardContent className="pt-6">
          <p className="text-center text-gray-500">
            No protein sequence available
          </p>
        </CardContent>
      </Card>
    );
  }

  const [exportType, setExportType] = useState<string>("pdb");
  const [fileName, setFileName] = useState<string>(
    `${proteinName.toLowerCase().replace(/\s+/g, "_")}`
  );
  const [isLinkCopied, setIsLinkCopied] = useState(false);
  const { toast } = useToast();

  // Generate PDB format
  const generatePDB = (): string => {
    let pdb = `HEADER    ${proteinName} HP Model\n`;
    pdb += `TITLE     ${proteinName} HP Model Generated by HP Protein Visualizer\n`;
    pdb += `REMARK    Sequence: ${sequence}\n`;

    // Calculate positions
    const positions: Position[] = [];

    // Start with the first amino acid at the origin
    positions.push({ x: 0, y: 0, z: 0 });

    // Place each subsequent amino acid based on the directions
    if (directions && directions.length === sequence.length - 1) {
      for (let i = 1; i < sequence.length; i++) {
        const prevPos = positions[i - 1];
        const directionStr = directions[i - 1];

        // Use direction directly (expecting letter format only)
        const direction = directionStr as Direction;

        const positionChange = directionToPosition(direction);
        const newPos: Position = {
          x: prevPos.x + positionChange.x,
          y: prevPos.y + positionChange.y,
          z: prevPos.z + positionChange.z,
        };

        positions.push(newPos);
      }
    }

    // Generate ATOM records
    for (let i = 0; i < sequence.length; i++) {
      const pos = positions[i] || { x: i, y: 0, z: 0 };
      const residueType = sequence[i] === "H" ? "HYD" : "POL";

      pdb += `ATOM  ${(i + 1)
        .toString()
        .padStart(5, " ")}  CA  ${residueType} A${(i + 1)
        .toString()
        .padStart(4, " ")}    ${pos.x.toFixed(3).padStart(8, " ")}${pos.y
        .toFixed(3)
        .padStart(8, " ")}${pos.z
        .toFixed(3)
        .padStart(8, " ")}  1.00  0.00           C\n`;
    }

    // Generate CONECT records for bonds
    for (let i = 0; i < sequence.length - 1; i++) {
      pdb += `CONECT${(i + 1).toString().padStart(5, " ")}${(i + 2)
        .toString()
        .padStart(5, " ")}\n`;
    }

    pdb += "END\n";

    return pdb;
  };

  // Generate CSV format
  const generateCSV = (): string => {
    let csv = "residue_number,residue_type,x,y,z\n";

    // Calculate positions
    const positions: Position[] = [];

    // Start with the first amino acid at the origin
    positions.push({ x: 0, y: 0, z: 0 });

    // Place each subsequent amino acid based on the directions
    if (directions && directions.length === sequence.length - 1) {
      for (let i = 1; i < sequence.length; i++) {
        const prevPos = positions[i - 1];
        const directionStr = directions[i - 1];

        // Use direction directly (expecting letter format only)
        const direction = directionStr as Direction;

        const positionChange = directionToPosition(direction);
        const newPos: Position = {
          x: prevPos.x + positionChange.x,
          y: prevPos.y + positionChange.y,
          z: prevPos.z + positionChange.z,
        };

        positions.push(newPos);
      }
    }

    // Generate CSV rows
    for (let i = 0; i < sequence.length; i++) {
      const pos = positions[i] || { x: i, y: 0, z: 0 };
      const residueType = sequence[i];

      csv += `${i + 1},${residueType},${pos.x},${pos.y},${pos.z}\n`;
    }

    return csv;
  };

  // Generate JSON format
  const generateJSON = (): string => {
    // Calculate positions
    const positions: Position[] = [];

    // Start with the first amino acid at the origin
    positions.push({ x: 0, y: 0, z: 0 });

    // Place each subsequent amino acid based on the directions
    if (directions && directions.length === sequence.length - 1) {
      for (let i = 1; i < sequence.length; i++) {
        const prevPos = positions[i - 1];
        const directionStr = directions[i - 1];

        // Use direction directly (expecting letter format only)
        const direction = directionStr as Direction;

        const positionChange = directionToPosition(direction);
        const newPos: Position = {
          x: prevPos.x + positionChange.x,
          y: prevPos.y + positionChange.y,
          z: prevPos.z + positionChange.z,
        };

        positions.push(newPos);
      }
    }

    const residues = sequence.split("").map((type, i) => ({
      id: i + 1,
      type,
      position: positions[i] || { x: i, y: 0, z: 0 },
    }));

    const data = {
      name: proteinName,
      sequence,
      directions,
      residues,
    };

    return JSON.stringify(data, null, 2);
  };

  // Handle export
  const handleExport = () => {
    let content = "";
    let mimeType = "";
    let extension = "";

    switch (exportType) {
      case "pdb":
        content = generatePDB();
        mimeType = "chemical/x-pdb";
        extension = "pdb";
        break;
      case "csv":
        content = generateCSV();
        mimeType = "text/csv";
        extension = "csv";
        break;
      case "json":
        content = generateJSON();
        mimeType = "application/json";
        extension = "json";
        break;
      default:
        content = sequence;
        mimeType = "text/plain";
        extension = "txt";
    }

    // Create a blob and download link
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${fileName}.${extension}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Call the onSaveExport callback if provided
    if (onSaveExport) {
      onSaveExport(exportType, `${fileName}.${extension}`);
    }

    toast({
      title: "Export Successful",
      description: `${fileName}.${extension} has been downloaded.`,
    });
  };

  // Handle share link
  const handleShareLink = () => {
    if (!sequence) return;

    // Create a shareable link with the sequence and directions as query parameters
    const url = new URL(window.location.href);
    url.searchParams.set("sequence", sequence);
    if (directions && directions.length > 0) {
      url.searchParams.set("directions", directions.join("-"));
    }
    if (proteinName) {
      url.searchParams.set("name", proteinName);
    }

    navigator.clipboard.writeText(url.toString());
    setIsLinkCopied(true);
    setTimeout(() => setIsLinkCopied(false), 2000);

    toast({
      title: "Link Copied!",
      description:
        "The shareable link has been copied to your clipboard. You can now paste it anywhere.",
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Export Options</CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="file">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="file">File Export</TabsTrigger>
            <TabsTrigger value="share">Share</TabsTrigger>
          </TabsList>

          <TabsContent value="file" className="space-y-4">
            <div>
              <Label htmlFor="export-type">Export Format</Label>
              <Select value={exportType} onValueChange={setExportType}>
                <SelectTrigger id="export-type">
                  <SelectValue placeholder="Select format" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pdb">PDB File</SelectItem>
                  <SelectItem value="csv">CSV File</SelectItem>
                  <SelectItem value="json">JSON File</SelectItem>
                  <SelectItem value="txt">Plain Text</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="file-name">File Name</Label>
              <Input
                id="file-name"
                value={fileName}
                onChange={(e) => setFileName(e.target.value)}
                placeholder="Enter file name"
              />
            </div>

            <Button onClick={handleExport} className="w-full">
              <Download className="w-4 h-4 mr-2" /> Export{" "}
              {exportType.toUpperCase()}
            </Button>
          </TabsContent>

          <TabsContent value="share" className="space-y-4">
            <div className="space-y-4">
              <p className="text-sm text-gray-500">
                Generate a shareable link that contains the protein sequence and
                folding directions. Anyone with this link can view and load your
                protein.
              </p>

              <Button
                onClick={handleShareLink}
                className="w-full"
                disabled={!sequence}
                variant={isLinkCopied ? "default" : "outline"}
              >
                {isLinkCopied ? (
                  <>
                    <Check className="w-4 h-4 mr-2" /> Link Copied!
                  </>
                ) : (
                  <>
                    <Share className="w-4 h-4 mr-2" /> Generate Shareable Link
                  </>
                )}
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default ExportOptions;
